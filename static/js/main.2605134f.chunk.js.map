{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","value","setStatus","initialState","query","status","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoList","dispatch","useState","loading","setLoading","useEffect","fetchData","a","data","todosActions","visibleTodos","array","result","COMPLETED","completed","ACTIVE","title","includes","filterTodos","length","className","map","id","classNames","onClick","currentTodoActions","setCurrentTodo","TodoFilter","queryState","onSubmit","event","preventDefault","onChange","target","filterActions","placeholder","style","pointerEvents","Loader","TodoModal","user","setUser","loadedUser","loadUser","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2605134f.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return { ...action.payload };\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype QUERY = { type: 'filter/SET_QUERY', payload: string };\ntype STATUS = { type: 'filter/SET_STATUS', payload: Status };\ntype ACTION = STATUS | QUERY;\n\nconst query = (value: string) => ({ type: 'filter/SET_QUERY', payload: value });\nconst setStatus = (\n  value: string,\n) => ({ type: 'filter/SET_STATUS', payload: value });\n\nconst status = {\n  setStatus,\n};\n\nexport const actions = {\n  query, status,\n};\n\nexport type State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: State = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterReducer = (state: State = initialState, action: ACTION): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET_TODOS',\n  payload: Todo[]\n};\n\ntype Action = SetTodosAction;\n\nexport const setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET_TODOS',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET_TODOS':\n      return [...action.payload];\n    default:\n      return [...todos];\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { getTodos } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { actions as todosActions } from '../../features/todos';\nimport { Status } from '../../types/Status';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const data: Todo[] = await getTodos();\n\n      dispatch(todosActions.setTodos(data));\n      setLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n  function filterTodos(array: Todo[]) {\n    let result = [...array];\n\n    result = result.filter(todo => {\n      switch (filter.status) {\n        case Status.COMPLETED:\n          if (todo.completed === true) {\n            return true;\n          }\n\n          return false;\n\n        case Status.ACTIVE:\n          if (todo.completed === false) {\n            return true;\n          }\n\n          return false;\n\n        case Status.ALL:\n          return true;\n\n        default:\n          return false;\n      }\n    });\n\n    if (filter.query !== '') {\n      result = result.filter(todo => todo.title.includes(filter.query));\n    }\n\n    return result;\n  }\n\n  function setCurrentTodo(todo: Todo) {\n    dispatch(currentTodoActions.setTodo(todo));\n  }\n\n  const visibleTodos: Todo[] = filterTodos(todos);\n\n  return (\n    <>\n      {visibleTodos.length === 0 && loading === false && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n      { loading === false && visibleTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span\n                      className=\"icon\"\n                      data-cy=\"iconCompleted\"\n                    >\n                      <i className=\"fas fa-check\" />\n\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={\n                    classNames(\n                      { 'has-text-danger': todo.completed === false },\n                      { 'has-text-success': todo.completed === true },\n                    )\n                  }\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => (setCurrentTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as filterActions } from '../../features/filter';\nimport { useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const queryState = useAppSelector(state => state.filter.query);\n\n  const query = (value: string) => dispatch(filterActions.query(value));\n  const setStatus = (value: Status) => dispatch(filterActions.status.setStatus(value));\n\n  function handleQuery(event: React.ChangeEvent<HTMLInputElement>) {\n    query(event.target.value);\n  }\n\n  function handleStatus(event: React.ChangeEvent<HTMLSelectElement>) {\n    setStatus(event.target.value as Status);\n  }\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleStatus}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={queryState}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo: Todo | null = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n\n  function removeCurrentTodo() {\n    dispatch(currentTodoActions.removeTodo());\n    setUser(null);\n  }\n\n  async function loadUser(todo: Todo) {\n    const loadedUser = await getUser(todo.userId);\n\n    setUser(loadedUser);\n  }\n\n  useEffect(() => {\n    if (currentTodo) {\n      loadUser(currentTodo);\n    }\n  }, [currentTodo]);\n\n  return (\n    <div\n      className={\n        classNames(\n          'modal',\n          { 'is-active': currentTodo },\n        )\n      }\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {user === null ? (<Loader />) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {currentTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* For not completed */}\n              {!currentTodo?.completed && (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {/* For completed */}\n              {currentTodo?.completed && (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n              {' by '}\n              {user && (\n                <a href={`mailto:${user.email}`}>{user.name}</a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  // const currentTodo: Todo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0 && (\n                <Loader />\n              )}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <TodoModal />\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}