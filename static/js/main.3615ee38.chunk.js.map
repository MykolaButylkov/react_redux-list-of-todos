{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["currentTodoReducer","state","action","type","actions","value","payload","all","active","completed","initialState","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","dispatch","useState","loading","setLoading","useEffect","fetchData","a","data","todosActions","visibleTodos","array","result","todo","title","includes","filterTodos","length","className","map","id","classNames","TodoFilter","queryState","onSubmit","event","preventDefault","onClick","filterActions","placeholder","onChange","target","style","pointerEvents","Loader","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3615ee38.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type QUERY = { type: 'filter/SET_QUERY', payload: string };\ntype ALL = { type: 'filter/ALL', payload: string };\ntype ACTIVE = { type: 'filter/ACTIVE', payload: string };\ntype COMPLETED = { type: 'filter/COMPLETED', payload: string };\n\ntype ACTION = ALL | ACTIVE | COMPLETED | QUERY;\n\nconst query = (value: string) => ({ type: 'filter/SET_QUERY', payload: value });\nconst all = (value: string) => ({ type: 'filter/ALL', payload: value });\nconst active = (value: string) => ({ type: 'filter/ACTIVE', payload: value });\n// eslint-disable-next-line max-len\nconst completed = (value: string) => ({ type: 'filter/COMPLETED', payload: value });\n\nconst status = {\n  all,\n  active,\n  completed,\n};\n\nexport const actions = {\n  query, status,\n};\n\nexport type State = {\n  query: string,\n  status: string,\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'filter/ALL',\n};\n\nconst filterReducer = (state: State = initialState, action: ACTION) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/ACTIVE':\n      return { ...state, status: action.payload };\n    case 'filter/COMPLETED':\n      return { ...state, status: action.payload };\n    case 'filter/ALL':\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET_TODOS',\n  payload: Todo[]\n};\n\ntype Action = SetTodosAction;\n\nexport const setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET_TODOS',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET_TODOS':\n      return [...action.payload];\n    default:\n      return [...todos];\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { getTodos } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { actions as todosActions } from '../../features/todos';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const data: Todo[] = await getTodos();\n\n      dispatch(todosActions.setTodos(data));\n      setLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n  function filterTodos(array: Todo[]) {\n    let result = [...array];\n\n    result = result.filter(todo => {\n      switch (filter.status) {\n        case 'filter/ACTIVE':\n          if (todo.completed === false) {\n            return true;\n          }\n\n          return false;\n\n        case 'filter/COMPLETED':\n          if (todo.completed === true) {\n            return true;\n          }\n\n          return false;\n\n        case 'filter/ALL':\n          return true;\n\n        default:\n          return false;\n      }\n    });\n\n    if (filter.query !== '') {\n      result = result.filter(todo => todo.title.includes(filter.query));\n    }\n\n    return result;\n  }\n\n  const visibleTodos: Todo[] = filterTodos(todos);\n\n  return (\n    <>\n      {visibleTodos.length === 0 && loading === false && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n      { loading === false && visibleTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={\n                    classNames(\n                      { 'has-text-danger': todo.completed === false },\n                      { 'has-text-success': todo.completed === true },\n                    )\n                  }\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as filterActions } from '../../features/filter';\nimport { useAppSelector } from '../../app/hooks';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const queryState = useAppSelector(state => state.filter.query);\n\n  const query = (value: string) => dispatch(filterActions.query(value));\n\n  const all = (value: string) => dispatch(filterActions.status.all(value));\n  const active = (value: string) => dispatch(filterActions.status.active(value));\n  const completed = (value: string) => dispatch(filterActions.status.completed(value));\n\n  function handleQuery(event: React.ChangeEvent<HTMLInputElement>) {\n    query(event.target.value);\n  }\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\">\n            <option onClick={() => (all('filter/ALL'))} value=\"all\">All</option>\n            <option onClick={() => (active('filter/ACTIVE'))} value=\"active\">Active</option>\n            <option onClick={() => (completed('filter/COMPLETED'))} value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={queryState}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable max-len */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\n// import { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const todos: Todo[] = useAppSelector(state => state.todos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0 && (\n                <Loader />\n              )}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* <TodoModal /> */}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}